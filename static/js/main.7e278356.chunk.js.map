{"version":3,"sources":["components/ContactForm/contactForm.module.css","components/Logo/logo.module.css","components/main.module.css","transitions/fade.module.css","components/ContactList/contactList.module.css","components/SearchForm/searchForm.module.css","redux/contactFormNameReduce.js","redux/contactFormNumberReduce.js","redux/contactFormReduce.js","redux/store.js","components/Logo/logo.js","redux/phonebookActions.js","components/ContactForm/contactForm.js","components/ContactForm/contactFormContainer.js","components/SearchForm/searchForm.js","components/SearchForm/searchFormContainer.js","components/ContactList/contactList.js","components/ContactList/contactListContainer.js","components/DublicateNotification/dublicateNotification.js","components/App.js","index.js","transitions/slide.module.css","components/DublicateNotification/dublicate.module.css"],"names":["module","exports","nameToAdd","createAction","nameToClear","nameReducer","createReducer","state","action","payload","numberToAdd","numberToClear","numberReducer","contactLocalDBAdd","contactFormToAdd","deleteContact","filterName","formReducer","contacts","filter","concat","id","name","number","contact","store","configureStore","reducer","contactFormNameReduce","contactFormNumberReduce","contactFormReduce","delete","clear_input","localDbAdd","Logo","isLoad","CSSTransition","in","timeout","classNames","slideTransition","unmountOnExit","className","styles","e","target","value","rules","messages","alpha","ContactForm","resetError","setState","errors","persist","preventDefault","this","nameExist","toLowerCase","nameAlreadyExist","numberExist","numberAlreadyExist","length","validateAll","then","data","props","onSubmitForm","shortid","generate","catch","formattedErrors","forEach","error","field","message","changeStatus","onChangeInputName","onChangeInputNumber","onSubmit","onContactToAdd","type","autoComplete","onChange","placeholder","Component","connect","dispatch","phoneBookActions","SearchForm","onChangeInputFilter","ContactList","nameFilter","undefined","includes","nameFiltered","TransitionGroup","component","map","item","key","onClick","onDeleteContact","DublicateNotification","status","fadeTransition","App","dublicate","handleChangeStatus","persistedContacts","localStorage","getItem","localStorageDbAdd","JSON","parse","prevProp","prevState","setTimeout","setItem","stringify","wrapper","ReactDOM","render","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,kBAAkB,qCAAqC,sBAAsB,yCAAyC,oBAAoB,uCAAuC,0BAA0B,6CAA6C,kBAAkB,qCAAqC,MAAQ,6B,oBCAzUD,EAAOC,QAAU,CAAC,WAAW,yB,oBCA7BD,EAAOC,QAAU,CAAC,QAAU,wB,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,YAAc,0BAA0B,KAAO,mBAAmB,WAAa,2B,yDCA7HD,EAAOC,QAAU,CAAC,iBAAiB,oCAAoC,uBAAuB,0CAA0C,2BAA2B,8CAA8C,wBAAwB,2CAA2C,0BAA0B,6CAA6C,uBAAuB,0CAA0C,yBAAyB,8C,mBCArbD,EAAOC,QAAU,CAAC,iBAAiB,mCAAmC,qBAAqB,uCAAuC,mBAAmB,qCAAqC,yBAAyB,6C,yGCoB7MC,EAAYC,YAAa,YACzBC,EAAcD,YAAa,cAQlBE,EANKC,YAAc,IAAD,mBAC5BJ,GAAY,SAACK,EAAOC,GAAR,OAAmBA,EAAOC,WADV,cAE5BL,GAAc,SAACG,EAAOC,GAAR,OAAmBA,EAAOC,WAFZ,ICH3BC,EAAcP,YAAa,cAC3BQ,EAAgBR,YAAa,gBAQpBS,EANON,YAAc,IAAD,iBAAC,EAC/BI,GAAc,SAACH,EAAOC,GAAR,OAAmBA,EAAOC,WADV,YAAC,EAE/BE,GAAgB,SAACJ,EAAOC,GAAR,OAAmBA,EAAOC,WAFZ,I,QC6B7BI,EAAoBV,YAAa,kBACjCW,EAAmBX,YAAa,YAChCY,EAAgBZ,YAAa,kBAC7Ba,EAAab,YAAa,gBA4BjBc,EA1BKX,YATE,CAClBY,SAAU,GACVC,OAAQ,KAOqB,iBAAC,EAC7BN,GAAoB,SAACN,EAAOC,GAAa,MAAO,CAAEU,SAAUV,EAAOC,YADvC,YAAC,EAE7BK,GAAmB,SAACP,EAAOC,GACxB,OAAO,2BACAD,EAAMW,UADb,IAEIA,SAAUX,EAAMW,SAASE,OAAO,CAAC,CAAEC,GAAIb,EAAOC,QAAQY,GAAIC,KAAMd,EAAOC,QAAQa,KAAMC,OAAQf,EAAOC,QAAQc,eALvF,YAAC,EAQ7BR,GAAgB,SAACR,EAAOC,GACrB,OAAO,2BACAD,EAAMW,UADb,IAEIA,SAAUX,EAAMW,SAASC,QAAO,SAAAK,GAAO,OAAIA,EAAQH,KAAOb,EAAOC,gBAX5C,YAAC,EAe7BO,GAAa,SAACT,EAAOC,GAClB,OAAO,2BACAD,GADP,IAEIY,OAAQX,EAAOC,aAlBM,IC1BlBgB,EAZDC,YAAe,CACzBC,QAAS,CACLL,KAAMM,EACNL,OAAQM,EACRX,SAAUY,EACVC,OAAQD,EACRX,OAAQW,EACRE,YAAaJ,EACbK,WAAYH,K,4ECdLI,EAPF,SAACC,GAAD,OACT,kBAACC,EAAA,EAAD,CAAeC,GAAIF,EAAOA,OAAQG,QAAS,IAAMC,WAAYC,IAAiBC,eAAa,GAEvF,wBAAIC,UAAWC,IAAO,aAAtB,e,kBCqDK3B,EAAab,YAAa,gBAAgB,SAAiByC,GACpE,MAAO,CACHnC,QAASmC,EAAEC,OAAOC,UAKb5C,EAAYC,YAAa,YAAY,SAAiByC,GAC/D,MAAO,CACHnC,QAASmC,EAAEC,OAAOC,UAIb1C,EAAcD,YAAa,cAAc,SAAiByC,GACnE,MAAO,CACHnC,QAAS,OAIJC,EAAcP,YAAa,cAAc,SAAiByC,GACnE,MAAO,CACHnC,QAASmC,EAAEC,OAAOC,UAIbnC,EAAgBR,YAAa,gBAAgB,SAAiByC,GACvE,MAAO,CACHnC,QAAS,OAIJK,EAAmBX,YAAa,YAAY,SAAiBkB,EAAIC,EAAMC,GAChF,MAAO,CACHd,QAAS,CACLY,GAAIA,EACJC,KAAMA,EACNC,OAAQA,OAMPV,EAAoBV,YAAa,kBAAkB,SAAiB2C,GAC7E,MAAO,CACHrC,QAASqC,MAKJ/B,EAAgBZ,YAAa,kBAAkB,SAAiBkB,GACzE,MAAO,CACHZ,QAASY,M,4CC5GX0B,EAAQ,CACVzB,KAAM,iBACNC,OAAQ,mBAGNyB,EAAW,CACbC,MAAO,mCACP1B,OAAQ,oCACR,gBAAiB,yBACjB,kBAAmB,0BAcF2B,E,4MAuCjBC,WAAa,WACT,EAAKC,SAAS,CACVC,OAAO,2BACA,EAAK9C,MAAM8C,QADZ,IAEF/B,KAAM,KACNC,OAAQ,U,6DA1CLqB,EAAGtB,EAAMC,EAAQL,EAAUmC,GAAS,IAAD,OAC9CT,EAAEU,UACFV,EAAEW,iBAEEF,GACAG,KAAKL,aAET,IAAMM,EApBW,SAACnC,EAAMJ,GAC5B,OAAOA,EAASC,QACZ,SAAAK,GAAO,OAAIA,EAAQF,KAAKoC,gBAAkBpC,EAAKoC,iBAkB7BC,CAAiBrC,EAAMJ,GACnC0C,EAhBa,SAACrC,EAAQL,GAChC,OAAOA,EAASC,QACZ,SAAAK,GAAO,OAAIA,EAAQD,OAAOmC,gBAAkBnC,EAAOmC,iBAc/BG,CAAmBtC,EAAQL,GAErB,IAArBuC,EAAUK,QAAyC,IAAvBF,EAAYE,OAK7CC,sBAAY,CAAEzC,OAAMC,UAAUwB,EAAOC,GAEhCgB,MAAK,SAAAC,GACF,EAAKC,MAAMC,aAAavB,EAAGwB,IAAQC,WAAY/C,EAAMC,GACrD,EAAK2C,MAAM9D,cACX,EAAK8D,MAAMvD,mBAEd2D,OAAM,SAAAjB,GAIH,IAAMkB,EAAkB,GACxBlB,EAAOmB,SAAQ,SAAAC,GACXF,EAAgBE,EAAMC,OAASD,EAAME,WAEzC,EAAKvB,SAAS,CAAEC,OAAQkB,OAnB5Bf,KAAKU,MAAMU,iB,+BAoCT,IAAD,SAC4DpB,KAAKU,MAA9D5C,EADH,EACGA,KAAMC,EADT,EACSA,OAAQsD,EADjB,EACiBA,kBAAmBC,EADpC,EACoCA,oBACnCzB,EAASG,KAAKjD,MAEpB,OAEI,yBAAKmC,UAAWC,IAAO,oBACnB,yBAAKD,UAAWC,IAAO,wBACnB,0BAAMoC,SAAU,SAACnC,GAAD,OAAO,EAAKoC,eAAepC,EAAG,EAAKsB,MAAM5C,KAAM,EAAK4C,MAAM3C,OAAQ,EAAK2C,MAAMhD,SAAUmC,KACnG,+BACI,uBAAGX,UAAWC,IAAO,4BAArB,QACA,2BACIsC,KAAK,OACLvC,UAAWC,IAAO,qBAClBrB,KAAK,OACLwB,MAAOxB,EACP4D,aAAa,MACbC,SAAUN,EACVO,YAAY,yBAEf/B,GAAU,0BAAMX,UAAWC,IAAO8B,OAAQjB,KAAKjD,MAAM8C,OAAO/B,OAIjE,+BACI,uBAAGoB,UAAWC,IAAO,4BAArB,UACA,2BACIsC,KAAK,OACLvC,UAAWC,IAAO,qBAClBrB,KAAK,SACLwB,MAAOvB,EACP2D,aAAa,MACbC,SAAUL,EACVM,YAAY,2BAEf/B,GAAU,0BAAMX,UAAWC,IAAO8B,OAAQjB,KAAKjD,MAAM8C,OAAO9B,SAEjE,yBAAKmB,UAAWC,IAAO,wBACnB,4BAAQsC,KAAK,SAASvC,UAAWC,IAAO,oBAAxC,uB,GAvFa0C,aCD1BC,gBAxBS,SAAA/E,GAAK,MAAK,CAC9Be,KAAMf,EAAMe,KACZC,OAAQhB,EAAMgB,OACdL,SAAUX,EAAMW,SAASA,aAIF,SAACqE,GAAD,MAAe,CAEtCV,kBAAmB,SAACjC,GAAD,OAAO2C,EAASC,EAA2B5C,KAC9DkC,oBAAqB,SAAClC,GAAD,OAAO2C,EAASC,EAA6B5C,KAClExC,YAAa,kBAAMmF,EAASC,MAC5B7E,cAAe,kBAAM4E,EAASC,MAC9BrB,aAAc,SAACvB,EAAGvB,EAAIC,EAAMC,GACxBqB,EAAEW,iBACFgC,EACIC,EAAkCnE,EAAIC,EAAMC,QAQzC+D,CAA6CpC,G,oBCT7CuC,GAfI,SAAC,GAAD,IAAGtE,EAAH,EAAGA,OAAQuE,EAAX,EAAWA,oBAAX,OACf,yBAAKhD,UAAWC,KAAO,mBACnB,yBAAKD,UAAWC,KAAO,uBACnB,uBAAGD,UAAWC,KAAO,2BAArB,yBACA,2BACIsC,KAAK,OACLvC,UAAWC,KAAO,oBAClByC,YAAY,0BACZtC,MAAO3B,EACPgE,SAAU,SAACvC,GAAD,OAAO8C,EAAoB9C,SCDtC0C,gBARS,SAAA/E,GAAK,MAAK,CAC9BY,OAAQZ,EAAMW,SAASC,WAGA,SAACoE,GAAD,MAAe,CACtCG,oBAAqB,SAAC9C,GAAD,OAAO2C,EAASC,EAA4B5C,QAGtD0C,CAA6CG,I,8BCJvCE,G,4MACjBC,WAAa,SAACzE,EAAQD,GAClB,YAAe2E,IAAX1E,EAEID,EAASC,QAAO,SAAAK,GAAO,OACnBA,EAAQF,KAAKoC,cAAcoC,SAAS3E,EAAOuC,kBAGhDxC,G,uDAGD,IAAD,OACC6E,EAAevC,KAAKoC,WAAWpC,KAAKU,MAAM/C,OAAQqC,KAAKU,MAAMhD,UAEnE,OACI,6BACI,kBAAC8E,GAAA,EAAD,CAAiBC,UAAU,KAAKvD,UAAWC,KAAO,mBAC7CoD,EAAaG,KAAI,SAAAC,GAAI,OAClB,kBAAC/D,EAAA,EAAD,CAAegE,IAAKD,EAAK9E,GAAIiB,QAAS,IAAMC,WAAYC,IAAiBC,eAAa,GAClF,wBAAIC,UAAWC,KAAO,yBAClB,yBAAKD,UAAWC,KAAO,6BACnB,yBAAKD,UAAWC,KAAO,0BAA2BwD,EAAK7E,MACvD,yBAAKoB,UAAWC,KAAO,4BAA6BwD,EAAK5E,QACzD,yBAAKmB,UAAWC,KAAO,yBACnB,4BACIsC,KAAK,SACL3D,KAAK,QACL+E,QAAS,kBAAM,EAAKnC,MAAMoC,gBAAgBH,EAAK9E,KAC/CqB,UAAWC,KAAO,2BAJtB,kB,GAxBC0C,aCK1BC,gBATS,SAAA/E,GAAK,MAAK,CAC9BW,SAAUX,EAAMW,SAASA,SACzBC,OAAQZ,EAAMW,SAASC,WAGA,SAACoE,GAAD,MAAe,CACtCe,gBAAiB,SAAC1D,EAAGvB,GAAJ,OAAWkE,EAASC,EAA+B5C,EAAGvB,QAG5DiE,CAA6CK,I,yCCC7CY,GARe,SAACC,GAAD,OAE1B,kBAAEpE,EAAA,EAAF,CAAgBC,GAAImE,EAAOA,OAAQlE,QAAS,IAAMC,WAAYkE,KAAgBhE,eAAa,GACvF,yBAAKC,UAAWC,KAAO,kBAAkB,uBAAGD,UAAWC,KAAO,kBAArB,6BCE3C+D,G,4MACFnG,MAAQ,CACJ4B,QAAQ,EACRwE,WAAW,G,EAqBfC,mBAAqB,WACjB,EAAKxD,SAAS,CAAEuD,WAAW,K,kEAlB3BnD,KAAKJ,SAAS,CAAEjB,QAAQ,IACxB,IAAM0E,EAAoBC,aAAaC,QAAQ,YAE3CF,GACArD,KAAKU,MAAM8C,kBAAkBC,KAAKC,MAAML,M,yCAI7BM,EAAUC,GAAY,IAAD,OAChCA,EAAUT,YAAcnD,KAAKjD,MAAMoG,WACnCU,YAAW,WAAQ,EAAKjE,SAAS,CAAEuD,WAAW,MAAY,KAE1DQ,EAASjG,WAAasC,KAAKU,MAAMhD,UACjC4F,aAAaQ,QAAQ,WAAYL,KAAKM,UAAU/D,KAAKU,MAAMhD,a,+BAQzD,IAAD,EACyBsC,KAAKjD,MAA3B4B,EADH,EACGA,OAAQwE,EADX,EACWA,UAEhB,OACI,kBAAC,WAAD,KACI,yBAAKjE,UAAWC,IAAO6E,SACnB,kBAAC,EAAD,CAAMrF,OAAQA,IACd,kBAAC,GAAD,CACIyC,aAAcpB,KAAKoD,qBAEtBpD,KAAKU,MAAMhD,SAAS4C,OAAS,GAC1B,kBAAC,GAAD,MACJ,kBAAC,GAAD,OAEH6C,GACG,kBAAC,GAAD,CAAuBH,OAAQG,S,GA3CjCtB,aAiEHC,gBAfS,SAAA/E,GAAK,MAAK,CAC9BW,SAAUX,EAAMW,SAASA,SACzBC,OAAQZ,EAAMW,SAASC,WAGA,SAACoE,GAAD,MAAe,CACtCyB,kBAAmB,SAAClE,GAChByC,EACIC,EAAmC1C,QAOhCwC,CAA6CoB,ICpE5De,IAASC,OACL,kBAAC,IAAD,CAAUjG,MAAOA,GACb,kBAAC,GAAD,OACSkG,SAASC,eAAe,U,mBCVzC5H,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,YAAc,2BAA2B,KAAO,oBAAoB,WAAa,4B,mBCAhID,EAAOC,QAAU,CAAC,gBAAgB,iCAAiC,gBAAgB,oC","file":"static/js/main.7e278356.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm-box\":\"contactForm_contactForm-box__ZG6O9\",\"contactForm-wrapper\":\"contactForm_contactForm-wrapper__2SRNB\",\"contactForm-input\":\"contactForm_contactForm-input__1cWik\",\"contactForm-input-title\":\"contactForm_contactForm-input-title__2zA03\",\"contactForm-btn\":\"contactForm_contactForm-btn__28LLa\",\"error\":\"contactForm_error__1ISdg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo-txt\":\"logo_logo-txt__2EzUk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"main_wrapper__1egyE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__2I-f8\",\"enterActive\":\"fade_enterActive__R8wOf\",\"exit\":\"fade_exit__DGUkl\",\"exitActive\":\"fade_exitActive__u5vNf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList-ul\":\"contactList_contactList-ul__zxJV2\",\"contactList-item-box\":\"contactList_contactList-item-box__2TPPl\",\"contactList-item-wrapper\":\"contactList_contactList-item-wrapper__25qsN\",\"contactList-item-name\":\"contactList_contactList-item-name__3CGaO\",\"contactList-item-number\":\"contactList_contactList-item-number__2qAVE\",\"contactList-item-btn\":\"contactList_contactList-item-btn__UHTSC\",\"contactList-btn-delete\":\"contactList_contactList-btn-delete__1aVQU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchForm-box\":\"searchForm_searchForm-box__18-1w\",\"searchForm-wrapper\":\"searchForm_searchForm-wrapper__36c_2\",\"searchForm-input\":\"searchForm_searchForm-input__3qFTp\",\"searchForm-input-title\":\"searchForm_searchForm-input-title__3R_vP\"};","//Код без использования Redux Toolkit\n/* import { Type } from './phonebookActions.js'\n\nconst nameReducer = (state = \"\", action) => {\n    switch (action.type) {\n        case Type.NAME_ADD:\n            return action.payload\n\n        case Type.NAME_CLEAR:\n            return action.payload\n\n        default:\n            return state;\n    }\n}\n\n\nexport default nameReducer; */\n\n//Код c использованием Redux Toolkit\nimport { createAction, createReducer } from '@reduxjs/toolkit';\nconst nameToAdd = createAction('NAME_ADD');\nconst nameToClear = createAction('NAME_CLEAR');\n\nconst nameReducer = createReducer('', {\n    [nameToAdd]: (state, action) => action.payload,\n    [nameToClear]: (state, action) => action.payload,\n});\n\n\nexport default nameReducer;","//Код без использования Redux Toolkit\n/* import { Type } from './phonebookActions.js'\n\nconst numberReducer = (state = \"\", action) => {\n    switch (action.type) {\n\n        case Type.NUMBER_ADD:\n            return action.payload\n\n        case Type.NUMBER_CLEAR:\n            return action.payload\n\n        default:\n            return state;\n    }\n}\n\nexport default numberReducer; */\n\n//Код c использованием Redux Toolkit\nimport { createAction, createReducer } from '@reduxjs/toolkit';\nconst numberToAdd = createAction('NUMBER_ADD');\nconst numberToClear = createAction('NUMBER_CLEAR');\n\nconst numberReducer = createReducer('', {\n    [numberToAdd]: (state, action) => action.payload,\n    [numberToClear]: (state, action) => action.payload,\n});\n\n\nexport default numberReducer;","//Код без использования Redux Toolkit\n/* import { Type } from './phonebookActions.js'\n\nconst initialState = ({\n    contacts: [],\n    filter: \"\"\n});\n\nconst formReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case Type.FORM_LOCAL_ADD:\n            return {\n                contacts: action.payload\n\n            }\n\n        case Type.FORM_ADD:\n            return {\n                ...state.contacts,\n                contacts: state.contacts.concat([{ id: action.payload.id, name: action.payload.name, number: action.payload.number }])\n\n            }\n\n        case Type.DELETE_CONTACT:\n            return {\n                ...state.contacts,\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\n            }\n\n        case Type.FILTER_VALUE:\n            return {\n                ...state,\n                filter: action.payload,\n            }\n\n\n\n\n        default:\n            return state;\n    }\n}\n\n\nexport default formReducer; */\n\n//Код c использованием Redux Toolkit\nimport { createAction, createReducer } from '@reduxjs/toolkit';\nconst initialState = ({\n    contacts: [],\n    filter: \"\"\n});\nconst contactLocalDBAdd = createAction('FORM_LOCAL_ADD');\nconst contactFormToAdd = createAction('FORM_ADD');\nconst deleteContact = createAction('DELETE_CONTACT');\nconst filterName = createAction('FILTER_VALUE');\n\nconst formReducer = createReducer(initialState, {\n    [contactLocalDBAdd]: (state, action) => { return { contacts: action.payload } },\n    [contactFormToAdd]: (state, action) => {\n        return {\n            ...state.contacts,\n            contacts: state.contacts.concat([{ id: action.payload.id, name: action.payload.name, number: action.payload.number }])\n        }\n    },\n    [deleteContact]: (state, action) => {\n        return {\n            ...state.contacts,\n            contacts: state.contacts.filter(contact => contact.id !== action.payload)\n        }\n    },\n\n    [filterName]: (state, action) => {\n        return {\n            ...state,\n            filter: action.payload,\n        }\n    },\n\n\n});\n\n\nexport default formReducer;","/* import { createStore, combineReducers } from 'redux'; */ //Код без использования Redux Toolkit\nimport { configureStore } from '@reduxjs/toolkit';\n/* import { devToolsEnhancer } from 'redux-devtools-extension'; */ //Код без использования Redux Toolkit\nimport contactFormNameReduce from \"./contactFormNameReduce.js\";\nimport contactFormNumberReduce from \"./contactFormNumberReduce.js\";\nimport contactFormReduce from \"./contactFormReduce.js\";\n\n//Код без использования Redux Toolkit\n/* const rootReducer = combineReducers({\n    name: contactFormNameReduce,\n    number: contactFormNumberReduce,\n    contacts: contactFormReduce,\n    delete: contactFormReduce,\n    filter: contactFormReduce,\n    clear_input: contactFormNameReduce,\n    localDbAdd: contactFormReduce,\n})\n\nconst store = createStore(rootReducer, devToolsEnhancer()); */\n\nconst store = configureStore({\n    reducer: {\n        name: contactFormNameReduce,\n        number: contactFormNumberReduce,\n        contacts: contactFormReduce,\n        delete: contactFormReduce,\n        filter: contactFormReduce,\n        clear_input: contactFormNameReduce,\n        localDbAdd: contactFormReduce,\n    },\n});\n\nexport default store;","import React from 'react';\nimport { CSSTransition } from \"react-transition-group\"\nimport styles from './logo.module.css';\nimport slideTransition from '../../transitions/slide.module.css';\nimport PropTypes from 'prop-types';\n\n\nconst Logo = (isLoad) =>\n    <CSSTransition in={isLoad.isLoad} timeout={1000} classNames={slideTransition} unmountOnExit>\n\n        <h1 className={styles[\"logo-txt\"]}>Phonebook</h1>\n\n    </CSSTransition>\n\nexport default Logo;\n\nLogo.propTypes = {\n    isLoad: PropTypes.bool.isRequired,\n};","import { createAction } from '@reduxjs/toolkit';\n//Код без использования Redux Toolkit\n/* export const Type = {\n    NAME_ADD: 'NAME_ADD',\n    NUMBER_ADD: 'NUMBER_ADD',\n    FORM_ADD: \"FORM_ADD\",\n    DELETE_CONTACT: \"DELETE_CONTACT\",\n    FILTER_VALUE: 'FILTER_VALUE',\n    NAME_CLEAR: \"NAME_CLEAR\",\n    NUMBER_CLEAR: \"NUMBER_CLEAR\",\n    FORM_LOCAL_ADD: \"FORM_LOCAL_ADD\"\n} */\n\n/* export const filterName = e => ({\n    type: \"FILTER_VALUE\",\n    filter: e.target.value,\n})\n */\n\n\n/* export const nameToAdd = (e) => ({\n    type: Type.NAME_ADD,\n    name: e.target.value\n}) */\n\n/* export const nameToClear = () => ({\n    type: Type.NAME_CLEAR,\n    name: \"\"\n}) */\n\n/* export const numberToClear = () => ({\n    type: Type.NUMBER_CLEAR,\n    number: \"\"\n})\n\n\n\nexport const numberToAdd = (e) => ({\n    type: Type.NUMBER_ADD,\n    number: e.target.value\n\n}) */\n\n/* export const contactFormToAdd = (id, name, number) => ({\n    type: Type.FORM_ADD,\n    id: id,\n    name: name,\n    number: number\n}) */\n\n/* export const contactLocalDBAdd = (value) => ({\n    type: Type.FORM_LOCAL_ADD,\n    payload: value\n}) */\n\n/* export const deleteContact = (id) => ({\n    type: 'DELETE_CONTACT',\n    payload: id\n}); */\n\n\n\n//Код c использованием Redux Toolkit\nexport const filterName = createAction('FILTER_VALUE', function prepare(e) {\n    return {\n        payload: e.target.value,\n    }\n})\n\n\nexport const nameToAdd = createAction('NAME_ADD', function prepare(e) {\n    return {\n        payload: e.target.value,\n    }\n})\n\nexport const nameToClear = createAction('NAME_CLEAR', function prepare(e) {\n    return {\n        payload: \"\",\n    }\n})\n\nexport const numberToAdd = createAction('NUMBER_ADD', function prepare(e) {\n    return {\n        payload: e.target.value,\n    }\n})\n\nexport const numberToClear = createAction('NUMBER_CLEAR', function prepare(e) {\n    return {\n        payload: \"\",\n    }\n})\n\nexport const contactFormToAdd = createAction('FORM_ADD', function prepare(id, name, number) {\n    return {\n        payload: {\n            id: id,\n            name: name,\n            number: number\n        }\n    }\n\n})\n\nexport const contactLocalDBAdd = createAction('FORM_LOCAL_ADD', function prepare(value) {\n    return {\n        payload: value\n    }\n\n})\n\nexport const deleteContact = createAction('DELETE_CONTACT', function prepare(id) {\n    return {\n        payload: id\n    }\n\n})\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport styles from './contactForm.module.css';\nimport { validateAll } from 'indicative/validator';\n\nconst rules = {\n    name: 'required|alpha',\n    number: 'required|number',\n};\n\nconst messages = {\n    alpha: 'Name must contain letters only!!',\n    number: 'Phone must contain numeral only!!',\n    'name.required': 'this field is required',\n    'number.required': 'this field is required',\n};\n\nconst nameAlreadyExist = (name, contacts) => {\n    return contacts.filter(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n};\nconst numberAlreadyExist = (number, contacts) => {\n    return contacts.filter(\n        contact => contact.number.toLowerCase() === number.toLowerCase(),\n    );\n};\n\nexport default class ContactForm extends Component {\n\n    onContactToAdd(e, name, number, contacts, errors) {\n        e.persist()\n        e.preventDefault();\n\n        if (errors) {\n            this.resetError();\n        }\n        const nameExist = nameAlreadyExist(name, contacts);\n        const numberExist = numberAlreadyExist(number, contacts);\n\n        if ((nameExist.length !== 0) && (numberExist.length !== 0)) {\n            this.props.changeStatus()\n            return\n        }\n\n        validateAll({ name, number }, rules, messages)\n\n            .then(data => {\n                this.props.onSubmitForm(e, shortid.generate(), name, number);\n                this.props.nameToClear();\n                this.props.numberToClear();\n            })\n            .catch(errors => {\n\n\n\n                const formattedErrors = {};\n                errors.forEach(error => {\n                    formattedErrors[error.field] = error.message;\n                });\n                this.setState({ errors: formattedErrors });\n\n            })\n\n    }\n\n\n    resetError = () => {\n        this.setState({\n            errors: {\n                ...this.state.errors,\n                name: null,\n                number: null\n            }\n        })\n    };\n\n    render() {\n        const { name, number, onChangeInputName, onChangeInputNumber } = this.props;\n        const errors = this.state;\n\n        return (\n\n            <div className={styles['contactForm-box']}>\n                <div className={styles['contactForm-wrapper']}>\n                    <form onSubmit={(e) => this.onContactToAdd(e, this.props.name, this.props.number, this.props.contacts, errors)} >\n                        <label>\n                            <p className={styles['contactForm-input-title']}>Name</p>\n                            <input\n                                type=\"text\"\n                                className={styles['contactForm-input']}\n                                name=\"name\"\n                                value={name}\n                                autoComplete=\"off\"\n                                onChange={onChangeInputName}\n                                placeholder=\"Type contact name...\"\n                            />\n                            {errors && <span className={styles.error}>{this.state.errors.name}</span>}\n                        </label>\n\n\n                        <label>\n                            <p className={styles['contactForm-input-title']}>Number</p>\n                            <input\n                                type=\"text\"\n                                className={styles['contactForm-input']}\n                                name=\"number\"\n                                value={number}\n                                autoComplete=\"off\"\n                                onChange={onChangeInputNumber}\n                                placeholder=\"Type contact number...\"\n                            />\n                            {errors && <span className={styles.error}>{this.state.errors.number}</span>}\n                        </label>\n                        <div className={styles['contactForm-btn-box']}>\n                            <button type=\"submit\" className={styles['contactForm-btn']}>Add contact</button>\n                        </div>\n                    </form>\n                </div>\n            </div >\n\n\n        )\n    }\n}\n\nContactForm.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onSubmitForm: PropTypes.func.isRequired,\n    onChangeInputName: PropTypes.func.isRequired,\n    onChangeInputNumber: PropTypes.func.isRequired,\n    nameToClear: PropTypes.func.isRequired,\n    numberToClear: PropTypes.func.isRequired,\n    onError: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    }),\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }),\n    ),\n};","import * as phoneBookActions from \"../../redux/phonebookActions.js\";\nimport { connect } from 'react-redux';\nimport ContactForm from './contactForm.js';\n\nconst mapStateToProps = state => ({\n    name: state.name,\n    number: state.number,\n    contacts: state.contacts.contacts,\n})\n\n\nconst mapDispatchToProps = (dispatch) => ({\n\n    onChangeInputName: (e) => dispatch(phoneBookActions.nameToAdd(e)),\n    onChangeInputNumber: (e) => dispatch(phoneBookActions.numberToAdd(e)),\n    nameToClear: () => dispatch(phoneBookActions.nameToClear()),\n    numberToClear: () => dispatch(phoneBookActions.numberToClear()),\n    onSubmitForm: (e, id, name, number) => {\n        e.preventDefault();\n        dispatch(\n            phoneBookActions.contactFormToAdd(id, name, number)\n        );\n\n    }\n\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm)","import React from 'react';\nimport styles from './searchForm.module.css';\nimport PropTypes from 'prop-types';\n\nconst SearchForm = ({ filter, onChangeInputFilter }) => (\n    <div className={styles['searchForm-box']}>\n        <div className={styles['searchForm-wrapper']}>\n            <p className={styles['searchForm-input-title']}>Find contacts by name</p>\n            <input\n                type=\"text\"\n                className={styles['searchForm-input']}\n                placeholder=\"Type to filter names...\"\n                value={filter}\n                onChange={(e) => onChangeInputFilter(e)}\n            ></input>\n        </div>\n    </div>\n);\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n    filter: PropTypes.string,\n    onChangeInputFilter: PropTypes.func.isRequired,\n};","import * as phoneBookActions from \"../../redux/phonebookActions.js\";\nimport { connect } from 'react-redux';\nimport SearchForm from './searchForm.js';\n\nconst mapStateToProps = state => ({\n    filter: state.contacts.filter,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onChangeInputFilter: (e) => dispatch(phoneBookActions.filterName(e)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm)","import React, { Component } from 'react';\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\nimport slideTransition from '../../transitions/slide.module.css';\nimport styles from './contactList.module.css';\nimport PropTypes from 'prop-types';\n\n\n\nexport default class ContactList extends Component {\n    nameFilter = (filter, contacts) => {\n        if (filter !== undefined) {\n            return (\n                contacts.filter(contact =>\n                    contact.name.toLowerCase().includes(filter.toLowerCase()),\n                ));\n        }\n        return contacts\n    }\n\n    render() {\n        const nameFiltered = this.nameFilter(this.props.filter, this.props.contacts);\n\n        return (\n            < div >\n                <TransitionGroup component=\"ul\" className={styles['contactList-ul']}>\n                    {nameFiltered.map(item => (\n                        <CSSTransition key={item.id} timeout={1000} classNames={slideTransition} unmountOnExit>\n                            <li className={styles['contactList-item-box']}>\n                                <div className={styles['contactList-item-wrapper']}>\n                                    <div className={styles['contactList-item-name']}>{item.name}</div>\n                                    <div className={styles['contactList-item-number']}>{item.number}</div>\n                                    <div className={styles['contactList-item-btn']}>\n                                        <button\n                                            type=\"button\"\n                                            name=\"delte\"\n                                            onClick={() => this.props.onDeleteContact(item.id)}\n                                            className={styles['contactList-btn-delete']}\n                                        >\n                                            X\n                                        </button>\n                                    </div>\n                                </div>\n                            </li>\n                        </CSSTransition>\n                    ))}\n\n                </TransitionGroup>\n            </div >\n        )\n    }\n}\n\n\n\n\nContactList.propTypes = {\n    onDeleteContact: PropTypes.func.isRequired,\n    filter: PropTypes.string,\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }),\n    ),\n};","import * as phoneBookActions from \"../../redux/phonebookActions.js\";\nimport { connect } from 'react-redux';\nimport ContactList from './contactList.js';\n\nconst mapStateToProps = state => ({\n    contacts: state.contacts.contacts,\n    filter: state.contacts.filter,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onDeleteContact: (e, id) => dispatch(phoneBookActions.deleteContact(e, id)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList)","import React from 'react';\nimport { CSSTransition } from \"react-transition-group\"\nimport fadeTransition from '../../transitions/fade.module.css';\nimport styles from './dublicate.module.css';\nimport PropTypes from 'prop-types';\n\nconst DublicateNotification = (status) => (\n\n    < CSSTransition in={status.status} timeout={1000} classNames={fadeTransition} unmountOnExit>\n        <div className={styles['dublicate-box']}><p className={styles['dublicate-txt']}>Contact already exist!</p></div>\n    </CSSTransition >\n\n);\n\nexport default DublicateNotification;\n\nDublicateNotification.propTypes = {\n    status: PropTypes.bool.isRequired,\n};","import React, { Component, Fragment } from 'react';\nimport Logo from './Logo/logo.js';\nimport styles from './main.module.css';\nimport ContactForm from './ContactForm/contactFormContainer.js';\nimport SearchForm from \"./SearchForm/searchFormContainer\";\nimport ContactList from \"./ContactList/contactListContainer.js\";\nimport DublicateNotification from \"./DublicateNotification/dublicateNotification.js\";\nimport * as phoneBookActions from \"../redux/phonebookActions.js\";\nimport { connect } from 'react-redux';\n\n\nclass App extends Component {\n    state = {\n        isLoad: false,\n        dublicate: false,\n    }\n\n    componentDidMount() {\n        this.setState({ isLoad: true })\n        const persistedContacts = localStorage.getItem(\"contacts\");\n\n        if (persistedContacts) {\n            this.props.localStorageDbAdd(JSON.parse(persistedContacts))\n        }\n    }\n\n    componentDidUpdate(prevProp, prevState) {\n        if (prevState.dublicate !== this.state.dublicate) {\n            setTimeout(() => { this.setState({ dublicate: false }) }, 3000)\n        }\n        if (prevProp.contacts !== this.props.contacts) {\n            localStorage.setItem('contacts', JSON.stringify(this.props.contacts))\n        }\n    }\n\n    handleChangeStatus = () => {\n        this.setState({ dublicate: true })\n    }\n\n    render() {\n        const { isLoad, dublicate } = this.state;\n\n        return (\n            <Fragment>\n                <div className={styles.wrapper}>\n                    <Logo isLoad={isLoad} />\n                    <ContactForm\n                        changeStatus={this.handleChangeStatus}\n                    />\n                    {this.props.contacts.length > 1 &&\n                        <SearchForm />}\n                    <ContactList />\n                </div>\n                {dublicate &&\n                    <DublicateNotification status={dublicate} />}\n            </Fragment>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    contacts: state.contacts.contacts,\n    filter: state.contacts.filter,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    localStorageDbAdd: (value) => {\n        dispatch(\n            phoneBookActions.contactLocalDBAdd(value)\n        );\n    }\n\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store.js\";\nimport App from \"./components/App\";\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__TbiKr\",\"enterActive\":\"slide_enterActive__18lRw\",\"exit\":\"slide_exit__CIwpa\",\"exitActive\":\"slide_exitActive__1okDB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dublicate-box\":\"dublicate_dublicate-box__3pu_i\",\"dublicate-txt\":\"dublicate_dublicate-txt__3-O3z\"};"],"sourceRoot":""}